# test of policy scan issue importer
 
name: Policy Scan with Veracode Auto-Packager

# on: [push, pull_request, workflow_dispatch]
#  #on: gollum          # sort of a dummy to prevent this from running
on: push
jobs:
  run-veracode-package:
    runs-on: ubuntu-latest 
    container: 
      image: veracode/api-signing:latest
    steps:
    
      - uses: actions/checkout@v3
      # Note: this will likely fail if there are more than 500 flaws, due to Veracode results limiting
      #   (would need a more elaborate method)
      - name: veracode package
        run: |
          export VERACODE_API_KEY_ID=${{ secrets.VERACODE_API_ID }}
          export VERACODE_API_KEY_SECRET=${{ secrets.VERACODE_API_KEY }}
          curl -fsS https://tools.veracode.com/veracode-cli/install | sh
          ./veracode configure
          ./veracode package -s . -a 
       #   #./veracode scan --source https://github.com/mokkang/NodeGoat --type repo --format json --output ./nodegoat_container.json
     #     ./veracode sbom --source https://github.com/mokkang/NodeGoat --type repo --format json --output ./nodegoat_sbom.json
        # ./veracode scan --source https://github.com/veracode/verademo-dotnet --type repo --format json --output ./veracode_container_scan_dotnet.json
        # ./veracode sbom --source https://github.com/veracode/verademo-dotnet --type repo --format json --output ./sbom_dotnet.json
        #guid=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name=NodeGoat" | jq -r '._embedded.applications[0].guid') 
        #echo GUID: ${guid}
        #  total_flaws=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True" | jq -r '.page.total_elements')
        #  echo TOTAL_FLAWS: ${total_flaws}
        #  http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True&size=${total_flaws}" > policy_flaws.json
        #  ls -l

      - name: save results file
        uses: actions/upload-artifact@v2
        with:
          name: nodegoat.zip
          path: .
      - name: Veracode Upload And Scan
  # You may pin to the exact commit or the version.
        uses: veracode/veracode-uploadandscan-action@98e2a2941b985e55bfe469ebcb970b2e686625e4
      # uses: veracode/veracode-uploadandscan-action@0.2.6
        with:
         # appname
         appname: NodeGoat-auto0Packages # default is ${{ github.repository }}
         # createprofile
         createprofile: true # default is true
         # filepath
         filepath: nodegoat.zip
         # version
         version:  ${{ github.run_id }}-  # default is Scan from Github job: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
         # vid
         vid: ${{ secrets.VERACODE_API_ID }} 
         # vkey
         vkey: ${{ secrets.VERACODE_API_KEY }} 
         # # true or false
         # createsandbox: # optional
         # # name of the sandbox
         # sandboxname: # optional
         # # wait X minutes for the scan to complete
         # scantimeout: # optional
         # # modules to exclude from module selection
         # exclude: # optional
         # # modules to include in module selection
         # include: # optional
         # # business criticality - policy selection
         # criticality: # optional
         # # filename pattern
         # pattern: # optional
         # # replacement
         # replacement: # optional
         # # specify to scan in a sandbox
         # sandboxid: # optional
         # # All top level modules
         # scanallnonfataltoplevelmodules: # optional
         # # platform selected modules
         # selected: # optional
         # # selected modules like from previous scan
         # selectedpreviously: # optional
         # # teams
         # teams: # optional
         # # teams
         # toplevel: # optional
         # # automatically delete the current scan if there are any errors when uploading files or starting the scan
         # deleteincompletescan: # optional
         # # Interval, in seconds, to poll for the status of a running scan. Value range is 30 to 120 (two minutes). Default is 120.
         # scanpollinginterval: # optional
         # # specify version of the Java API Wrapper; default is latest
         # javawrapperversion: # optional
         # # show detailed diagnostic information, which you can use for debugging, in the output.
         # debug: # optional
         # # automatically select all new top-level modules for inclusion in the scan
         # includenewmodules: # optional
              
  # import-policy-flaws:
  #   needs: get-policy-flaws
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: get flaw file
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: policy-flaws
  #         path: .

  #     - name: debug1
  #       run: |
  #         pwd
  #         ls -l
  #         ls -l .

  #     - name: import flaws as issues
  #       uses: buzzcode/veracode-flaws-to-issues@v1
  #       with:
  #         scan-results-json: '/tmp/policy_flaws.json'
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
